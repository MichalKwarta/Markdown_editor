{"ast":null,"code":"var _jsxFileName = \"/home/mkwarta/Programming/Notes/notes_frontend/src/components/WorkArea.tsx\";\nimport Grid from \"../styled/Grid\";\nimport GridChild from \"../styled/GridChild\";\nimport styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\nimport ReactMarkdown from \"react-markdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WriteArea = styled(GridChild)`\n  grid-column-start: 2;\n  border: 1px solid ${props => props.theme.color || \"transparent\"};\n  width: 100%;\n  height: 100%;\n  resize: none;\n  background-color: ${props => props.theme.elementColor || \"transparent\"};\n  color: ${props => props.theme.color || \"transparent\"};\n  border-radius: 1rem;\n  padding: 1rem;\n  font-size: 1rem;\n  ${props => props.media || ''}\n  font-family: inherit;\n  letter-spacing: 0.1rem;\n  transition: background-color .25s ease-in;\n\n\n  padding: 1rem;\n  &:focus {\n    outline: none;\n  }\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n_c = WriteArea;\n\nfunction WorkArea(props) {\n  const handleChange = e => {\n    props.setPlainText(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    templatecolumns: \"1fr 1fr\",\n    templaterows: \"1fr\",\n    width: \"100vw\",\n    height: \"100%\",\n    columngap: \"3rem\",\n    rowgap: \"1rem\",\n    padding: \"1rem\",\n    children: [/*#__PURE__*/_jsxDEV(WriteArea, {\n      as: motion.textarea,\n      initial: {\n        x: \"-100%\"\n      },\n      animate: {\n        x: 0\n      },\n      exit: {\n        x: \"-100%\"\n      },\n      transition: {\n        duration: 1,\n        ease: \"easeOut\"\n      },\n      placeholder: \"Write something here\",\n      onChange: handleChange,\n      rowstart: 1,\n      rowend: 2,\n      columnend: 1,\n      columnstart: 1,\n      onSelect: e => {\n        props.selectionSetter({\n          start: e.target.selectionStart,\n          end: e.target.selectionEnd\n        });\n      },\n      value: props.plainText,\n      onKeyDown: e => {\n        if (e.ctrlKey) {\n          switch (e.key) {\n            case \"b\" || \"B\":\n              props.boldText();\n              break;\n\n            case \"i\" || \"I\":\n              props.italicText();\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WriteArea, {\n      as: motion.div,\n      initial: {\n        x: \"100%\"\n      },\n      animate: {\n        x: 0\n      },\n      exit: {\n        x: \"100%\"\n      },\n      transition: {\n        duration: 1,\n        ease: \"easeOut\"\n      },\n      rowstart: 1,\n      rowend: 2,\n      columnend: 2,\n      columnstart: 2,\n      children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        children: props.plainText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = WorkArea;\nexport default WorkArea;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WriteArea\");\n$RefreshReg$(_c2, \"WorkArea\");","map":{"version":3,"sources":["/home/mkwarta/Programming/Notes/notes_frontend/src/components/WorkArea.tsx"],"names":["Grid","GridChild","styled","motion","ReactMarkdown","WriteArea","props","theme","color","elementColor","media","WorkArea","handleChange","e","setPlainText","target","value","textarea","x","duration","ease","selectionSetter","start","selectionStart","end","selectionEnd","plainText","ctrlKey","key","boldText","italicText","div"],"mappings":"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","sourcesContent":["import { ChangeEvent, Dispatch,  SetStateAction } from \"react\";\nimport Grid from \"../styled/Grid\";\nimport GridChild from \"../styled/GridChild\";\nimport GridChildProps from \"../styled/GridChild\";\nimport styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst WriteArea = styled(GridChild)<GridChildProps>`\n  grid-column-start: 2;\n  border: 1px solid ${(props) => props.theme.color || \"transparent\"};\n  width: 100%;\n  height: 100%;\n  resize: none;\n  background-color: ${(props) => props.theme.elementColor || \"transparent\"};\n  color: ${(props) => props.theme.color || \"transparent\"};\n  border-radius: 1rem;\n  padding: 1rem;\n  font-size: 1rem;\n  ${props=>props.media||''}\n  font-family: inherit;\n  letter-spacing: 0.1rem;\n  transition: background-color .25s ease-in;\n\n\n  padding: 1rem;\n  &:focus {\n    outline: none;\n  }\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nfunction WorkArea(props: { italicText:()=>void,boldText:()=>void,plainText:string,setPlainText:React.Dispatch<React.SetStateAction<string>>,  selectionSetter: Dispatch<SetStateAction<{ start: number; end: number; }>> }) {\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    props.setPlainText(e.target.value);\n  };\n  return (\n    <Grid\n      templatecolumns=\"1fr 1fr\"\n      templaterows=\"1fr\"\n      width=\"100vw\"\n      height=\"100%\"\n      columngap=\"3rem\"\n      rowgap=\"1rem\"\n      padding=\"1rem\"\n    >\n      <WriteArea\n              as={motion.textarea}\n              initial={{ x: \"-100%\" }}\n              animate={{ x: 0 }}\n              exit={{ x: \"-100%\" }}\n              transition={{ duration: 1, ease: \"easeOut\" }}\n              placeholder={\"Write something here\"}\n              onChange={handleChange}\n              rowstart={1}\n              rowend={2}\n              columnend={1}\n              columnstart={1}\n              onSelect={(e: ChangeEvent<HTMLTextAreaElement>) => {\n                  props.selectionSetter({ start: e.target.selectionStart, end: e.target.selectionEnd })\n              }}\n        value={props.plainText}\n        onKeyDown={(e: any) => { \n          if (e.ctrlKey) { \n            switch (e.key) { \n              case \"b\"||\"B\":\n                props.boldText()\n                break;\n              case \"i\" || \"I\":\n                props.italicText()\n                \n            }\n              \n          }\n        }}\n      ></WriteArea>\n      <WriteArea\n        as={motion.div}\n        initial={{ x: \"100%\" }}\n        animate={{ x: 0 }}\n        exit={{ x: \"100%\" }}\n        transition={{ duration: 1, ease: \"easeOut\" }}\n        rowstart={1}\n        rowend={2}\n        columnend={2}\n        columnstart={2}\n       \n      >\n        <ReactMarkdown children={props.plainText} />\n      </WriteArea>\n    </Grid>\n  );\n}\n\nexport default WorkArea;\n"]},"metadata":{},"sourceType":"module"}